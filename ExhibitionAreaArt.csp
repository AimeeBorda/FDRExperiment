include "RmD.csp"
include "RmB.csp"
include "RmA.csp"
include "Assertions.csp"

transparent normal

datatype Room = EA | EB | ED | Corr 

Processes = {0..1}
MaxAgents = 4
MaxAgentsEA = MaxAgents*2
MaxAgentsPair = MaxAgents
EmergencyCount = 2

notR(rm) = {x | x<- Room, x != rm}

---------------------------------------------
--		Events
---------------------------------------------
channel adapt : {0..MaxAgentsEA}
channel adaptE
channel emergency 				-- local state (True over MaxAgents, False under MaxAgents)
channel goto : Room.Room			-- agents' movement

channel r : Processes		-- locations for rooms
channel ack



event(x,t)= Union({inter(E(x), M(t)), inter(E(t),M(x)),inter(E(t),E(x)), inter(M(t),M(x))})
E("") = {}
E(<x>^xs) = if x == 'A' then union(EventsA,E(xs)) else if x == 'B' then union(EventsB,E(xs)) else if x == 'D' then union(EventsD,E(xs)) else {}
M("") = {}
M(<x>^xs) = if x == 'A' then union(MonitorsA,M(xs)) else if x == 'B' then union(MonitorsB,M(xs)) else if x == 'D' then union(MonitorsD,M(xs)) else {}

RoomAB = normal(RmA [| event("A","B") |] RmB)
RoomBD = normal(RmD [| event("D","B") |] RmB)

ExhibitionArea = normal(RoomAB [| event("AB","D") |] RmD)



---------------------------------------------
--		Requirements Assertions
---------------------------------------------

---------- at most MaxAgents people in room D ---------- 
Requirement2 = let T(n) =   (n < MaxAgents & goto!EB!ED  -> T(n+1)) 
								[] (n > 0  & goto!ED!Corr -> T(n-1))
								[] (emergency -> RUN(union(EventsD,MonitorsD)))
				within T(0)

---------- at most MaxAgentsEA people in the Exhibition Area ----------  
Requirement4 = let T(n) =   (n < MaxAgentsEA & goto!Corr!EA  -> T(n+1)) 
							[] (n >= 0  & goto?_:{EA,ED}!Corr -> T(n-1))
							[] (goto?_:{EA.EB,EB.EA,EB.ED} -> T(n))
							[] (emergency -> RUN(Union({MonitorsA,MonitorsB,MonitorsD,EventsA,EventsB,EventsD})))
			within T(0)

---------- Logical Movement through Exhibition Area ---------- 
Movement = let M(a,b,d) = (a > 0 and b <= MaxAgentsEA & goto!EA!EB -> M(a-1,b+1,d)) 
							[] (b > 0 and a <= MaxAgentsEA & goto!EB!EA -> M(a+1,b-1,d))
							[] (b > 0 and d <= MaxAgentsEA & goto!EB!ED -> M(a,b-1,d+1)) 
							[] (d > 0 & goto!ED!Corr -> M(a,b,d-1)) 
							[] (a > 0 & goto!EA!Corr -> M(a-1,b,d)) 
							[] (a <= MaxAgentsEA & goto!Corr!EA -> M(a+1,b,d)) 
			within M(0,0,0)

Requirement5D =  RmD /+EventsD+\ (BehaviourD |||  RUN({emergency}))
Requirement5B =  RmB /\ (emergency -> RUN(union(EventsB,{emergency})))
Requirement5A =  RmA /\ (emergency -> (BehaviourA ||| RUN({emergency})))	

